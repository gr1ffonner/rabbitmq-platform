// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	amqp091 "github.com/rabbitmq/amqp091-go"

	mock "github.com/stretchr/testify/mock"
)

// RabbitMQClientInterface is an autogenerated mock type for the RabbitMQClientInterface type
type RabbitMQClientInterface struct {
	mock.Mock
}

// BindQueue provides a mock function with given fields: ch, queueName, routingKey, exchange
func (_m *RabbitMQClientInterface) BindQueue(ch *amqp091.Channel, queueName string, routingKey string, exchange string) error {
	ret := _m.Called(ch, queueName, routingKey, exchange)

	if len(ret) == 0 {
		panic("no return value specified for BindQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*amqp091.Channel, string, string, string) error); ok {
		r0 = rf(ch, queueName, routingKey, exchange)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with no fields
func (_m *RabbitMQClientInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeclareExchange provides a mock function with given fields: ch, name
func (_m *RabbitMQClientInterface) DeclareExchange(ch *amqp091.Channel, name string) error {
	ret := _m.Called(ch, name)

	if len(ret) == 0 {
		panic("no return value specified for DeclareExchange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*amqp091.Channel, string) error); ok {
		r0 = rf(ch, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeclareQueue provides a mock function with given fields: ch, name, args
func (_m *RabbitMQClientInterface) DeclareQueue(ch *amqp091.Channel, name string, args amqp091.Table) (amqp091.Queue, error) {
	ret := _m.Called(ch, name, args)

	if len(ret) == 0 {
		panic("no return value specified for DeclareQueue")
	}

	var r0 amqp091.Queue
	var r1 error
	if rf, ok := ret.Get(0).(func(*amqp091.Channel, string, amqp091.Table) (amqp091.Queue, error)); ok {
		return rf(ch, name, args)
	}
	if rf, ok := ret.Get(0).(func(*amqp091.Channel, string, amqp091.Table) amqp091.Queue); ok {
		r0 = rf(ch, name, args)
	} else {
		r0 = ret.Get(0).(amqp091.Queue)
	}

	if rf, ok := ret.Get(1).(func(*amqp091.Channel, string, amqp091.Table) error); ok {
		r1 = rf(ch, name, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsConnected provides a mock function with no fields
func (_m *RabbitMQClientInterface) IsConnected() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsConnected")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewChannel provides a mock function with no fields
func (_m *RabbitMQClientInterface) NewChannel() (*amqp091.Channel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewChannel")
	}

	var r0 *amqp091.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func() (*amqp091.Channel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *amqp091.Channel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amqp091.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRabbitMQClientInterface creates a new instance of RabbitMQClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRabbitMQClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RabbitMQClientInterface {
	mock := &RabbitMQClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
